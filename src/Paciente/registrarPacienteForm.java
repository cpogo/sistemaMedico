/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Paciente;
import ConexionC.ConsultarPaciente;
import conexiondb.conexiondb;
import ConexionPaciente.registrarPaciente_Conexion;
import fichaMedica.registroFichaForm;
import java.sql.Connection;
import java.util.Calendar;
import javax.swing.JOptionPane;
import java.sql.Date;

/**
 *
 * @author j3s
 */
public class registrarPacienteForm extends javax.swing.JFrame {

    /**
     * Creates new form registrarPacienteForm
     */
    
    public static String MensajeRegistrarPaciente = "";
    public static String MensajeRegistrarPaciente1 = "";
    public static String MensajeRegistrarPaciente2 = "";
    public static String MensajeRegistrarPaciente3 = "";
    public static String MensajeRegistrarPaciente4 = "";
    public static String MensajeRegistrarPaciente5 = "";
    public static String MensajeRegistrarPaciente6 = "";
    public static String MensajeRegistrarPaciente7 = "";
    public static String MensajeRegistrarPaciente8 = "";
    public static String MensajeRegistrarPaciente9 = "";
    public static String MensajeRegistrarPaciente10 = "";
    
    public registrarPacienteForm() {
        initComponents();
        Connection c = conexiondb.getDBConnection();
        int numCodigo = registrarPaciente_Conexion.getMaxId_Paciente(c)+1;
        lblCodigoPaciente.setText(String.valueOf(numCodigo));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        lblCodigoPaciente = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtCedula = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        btnRegistrar = new javax.swing.JButton();
        txtApellido = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtAño = new javax.swing.JTextField();
        txtMes = new javax.swing.JTextField();
        txtDia = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(250, 250, 250));

        jLabel1.setFont(new java.awt.Font("WenQuanYi Micro Hei", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Nuevo Paciente");

        jLabel8.setText("Teléfono:");

        jLabel2.setText("Código del paciente:");

        txtTelefono.setBackground(new java.awt.Color(254, 254, 254));
        txtTelefono.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTelefonoFocusLost(evt);
            }
        });

        lblCodigoPaciente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txtDireccion.setBackground(new java.awt.Color(254, 254, 254));
        txtDireccion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDireccionFocusLost(evt);
            }
        });

        jLabel3.setText("Cédula:");

        jLabel9.setText("Sexo:");

        txtCedula.setBackground(new java.awt.Color(254, 254, 254));
        txtCedula.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCedulaFocusLost(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-----", "Masculino", "Femenino" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jLabel4.setText("Nombre:");

        jLabel10.setText("Tipo de sangre:");

        txtNombre.setBackground(new java.awt.Color(254, 254, 254));
        txtNombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNombreFocusLost(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--", "A+", "A-", "O+", "O-", "AB+", "AB-", "B+", "B-" }));
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });

        jLabel5.setText("Apellido");

        btnRegistrar.setBackground(new java.awt.Color(75, 75, 253));
        btnRegistrar.setFont(new java.awt.Font("WenQuanYi Micro Hei", 1, 13)); // NOI18N
        btnRegistrar.setForeground(new java.awt.Color(254, 254, 254));
        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        txtApellido.setBackground(new java.awt.Color(254, 254, 254));
        txtApellido.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtApellidoFocusLost(evt);
            }
        });

        jLabel6.setText("Fecha de nacimiento:");

        jLabel7.setText("Dirección:");

        txtAño.setBackground(new java.awt.Color(254, 254, 254));
        txtAño.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAñoFocusLost(evt);
            }
        });
        txtAño.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAñoKeyReleased(evt);
            }
        });

        txtMes.setBackground(new java.awt.Color(254, 254, 254));
        txtMes.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMesFocusLost(evt);
            }
        });
        txtMes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMesKeyReleased(evt);
            }
        });

        txtDia.setBackground(new java.awt.Color(254, 254, 254));
        txtDia.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDiaFocusLost(evt);
            }
        });
        txtDia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDiaKeyReleased(evt);
            }
        });

        jLabel11.setText("Día:");

        jLabel12.setText("Mes:");

        jLabel13.setText("Año:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(btnRegistrar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(txtCedula, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(17, 17, 17))
                                .addComponent(txtNombre)
                                .addComponent(txtApellido))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(2, 2, 2)
                                .addComponent(txtDia, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)
                                .addGap(2, 2, 2)
                                .addComponent(txtMes, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13)
                                .addGap(4, 4, 4)
                                .addComponent(txtAño, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(32, 32, 32)
                            .addComponent(lblCodigoPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7)
                                .addComponent(jLabel8)
                                .addComponent(jLabel9)
                                .addComponent(jLabel10))
                            .addGap(61, 61, 61)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtTelefono, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtDireccion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(19, Short.MAX_VALUE))
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(lblCodigoPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(txtCedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(txtMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)
                            .addComponent(txtAño, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRegistrar))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        String cedula = txtCedula.getText();
        String nombre = txtNombre.getText();
        String apellido = txtApellido.getText();
        String telefono = txtTelefono.getText();
        String tipodeSangre = (String) jComboBox2.getSelectedItem();
        String genero = (String) jComboBox1.getSelectedItem();
        String direccion = txtDireccion.getText();
        String dia = txtDia.getText();
        String mes = txtMes.getText();
        String anio = txtAño.getText();
        MensajeRegistrarPaciente = "";
        MensajeRegistrarPaciente = MensajeRegistrarPaciente1 + MensajeRegistrarPaciente2 + MensajeRegistrarPaciente3 + MensajeRegistrarPaciente4 + MensajeRegistrarPaciente5 + MensajeRegistrarPaciente6 + MensajeRegistrarPaciente7 + MensajeRegistrarPaciente8 + MensajeRegistrarPaciente9 + MensajeRegistrarPaciente10;
        
        if (cedula.equals("") && MensajeRegistrarPaciente1.equals("")){
            MensajeRegistrarPaciente += "El campo cédula no puede estar vacío\n";
            txtCedula.setBackground(java.awt.Color.PINK);
        }else{
            if(!MensajeRegistrarPaciente1.equals(""))
                txtCedula.setBackground(java.awt.Color.PINK);
            else
                txtCedula.setBackground(java.awt.Color.WHITE);
        }
        
        if (nombre.equals("") && MensajeRegistrarPaciente2.equals("")){
            MensajeRegistrarPaciente += "El campo nombre no puede estar vacío\n";
            txtNombre.setBackground(java.awt.Color.PINK);
        }else{
            if(!MensajeRegistrarPaciente2.equals(""))
                txtNombre.setBackground(java.awt.Color.PINK);
            else
                txtNombre.setBackground(java.awt.Color.WHITE);
        }
        
        if (apellido.equals("") && MensajeRegistrarPaciente3.equals("")){
            MensajeRegistrarPaciente += "El campo apellido no puede estar vacío\n";
            txtApellido.setBackground(java.awt.Color.PINK);
        }else{
            if(!MensajeRegistrarPaciente3.equals(""))
                txtApellido.setBackground(java.awt.Color.PINK);
            else
                txtApellido.setBackground(java.awt.Color.WHITE);
        }
        
        if (direccion.equals("") && MensajeRegistrarPaciente4.equals("")){
            MensajeRegistrarPaciente += "El campo dirección no puede estar vacío\n";
            txtDireccion.setBackground(java.awt.Color.PINK);
        }else{
            if(!MensajeRegistrarPaciente4.equals(""))
                txtDireccion.setBackground(java.awt.Color.PINK);
            else
                txtDireccion.setBackground(java.awt.Color.WHITE);
        }
        
        if (telefono.equals("") && MensajeRegistrarPaciente5.equals("")){
            MensajeRegistrarPaciente += "El campo teléfono no puede estar vacío\n";
            txtTelefono.setBackground(java.awt.Color.PINK);
        }else{
            if(!MensajeRegistrarPaciente5.equals(""))
                txtTelefono.setBackground(java.awt.Color.PINK);
            else
                txtTelefono.setBackground(java.awt.Color.WHITE);
        }
        
        if (dia.equals("") && MensajeRegistrarPaciente8.equals("")){
            MensajeRegistrarPaciente += "El campo día de la fecha de nacimiento no puede estar vacío\n";
            txtDia.setBackground(java.awt.Color.PINK);
        }else{
            if(!MensajeRegistrarPaciente8.equals(""))
                txtDia.setBackground(java.awt.Color.PINK);
            else
                txtDia.setBackground(java.awt.Color.WHITE);
        }
        
        if (mes.equals("") && MensajeRegistrarPaciente9.equals("")){
            MensajeRegistrarPaciente += "El campo mes de la fecha de nacimiento no puede estar vacío\n";
            txtMes.setBackground(java.awt.Color.PINK);
        }else{
            if(!MensajeRegistrarPaciente9.equals(""))
                txtMes.setBackground(java.awt.Color.PINK);
            else
                txtMes.setBackground(java.awt.Color.WHITE);
        }
        
        if (anio.equals("") && MensajeRegistrarPaciente10.equals("")){
            MensajeRegistrarPaciente += "El campo año de la fecha de nacimiento no puede estar vacío\n";
            txtAño.setBackground(java.awt.Color.PINK);
        }else{
            if(!MensajeRegistrarPaciente10.equals(""))
                txtAño.setBackground(java.awt.Color.PINK);
            else
                txtAño.setBackground(java.awt.Color.WHITE);
        }
        
        if (genero.equals("-----") && MensajeRegistrarPaciente6.equals(""))
            MensajeRegistrarPaciente += "No se ha seleccionado ningún sexo\n";
        

        if (tipodeSangre.equals("--") && MensajeRegistrarPaciente7.equals(""))
            MensajeRegistrarPaciente += "No se ha seleccionado ningún tipo de sangre\n";

        if(MensajeRegistrarPaciente.equals("")){
            int id_sexo_=0;
            if(genero.equals("Femenino"))
                id_sexo_= 1;
            else if(genero.equals("Masculino"))
                id_sexo_=2;
            int tipo_sangre_= 0;
            if(tipodeSangre.equals("A+"))
                tipo_sangre_ = 1;
            if(tipodeSangre.equals("A-"))
                tipo_sangre_ = 2;
            if(tipodeSangre.equals("O+"))
                tipo_sangre_ = 3;
            if(tipodeSangre.equals("0-"))
                tipo_sangre_ = 4;
            if(tipodeSangre.equals("B+"))
                tipo_sangre_ = 5;
            if(tipodeSangre.equals("B-"))
                tipo_sangre_ = 6;
            if(tipodeSangre.equals("AB+"))
                tipo_sangre_ = 7;
            if(tipodeSangre.equals("AB-"))
                tipo_sangre_ = 8;
            
            Connection c = conexiondb.getDBConnection();
            
            Date fecha_a_ingresar = new Date(Integer.parseInt(anio)-1900,Integer.parseInt(mes)-1,Integer.parseInt(dia));
            System.out.println("Este es el anio"+Integer.parseInt(anio));
            registrarPaciente_Conexion.registrarPaciente(c, cedula, nombre, apellido, fecha_a_ingresar, direccion,telefono,id_sexo_,tipo_sangre_);
            JOptionPane.showMessageDialog(rootPane, "Registro exitoso", "Mensaje", 1);
            JOptionPane.showMessageDialog(rootPane, "Ahora se procederá al registro de la Ficha Médica", "Mensaje", 1);
            registroFichaForm registroFichaForm = new registroFichaForm();
            registroFichaForm.setVisible(true);
            this.setVisible(false);
        }else
            JOptionPane.showMessageDialog(rootPane, MensajeRegistrarPaciente, "Advertencia", 2);
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void txtCedulaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCedulaFocusLost
        String cedula = txtCedula.getText();
        MensajeRegistrarPaciente1 = "";
        if (cedula.equals(""))
            MensajeRegistrarPaciente1 += "El campo cédula no puede estar vacío\n";
        if (!esNumero(cedula))
            MensajeRegistrarPaciente1 += "El campo cédula no puede contener espacios en blanco ni caracteres alfabéticos\n";
        if (cedula.length() != 10 && !cedula.equals(""))
            MensajeRegistrarPaciente1 += "El campo cédula solo tiene 10 dígitos\n";
    }//GEN-LAST:event_txtCedulaFocusLost

    private void txtNombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNombreFocusLost
        String nombre = txtNombre.getText();
        MensajeRegistrarPaciente2 = "";
        if (nombre.equals(""))
            MensajeRegistrarPaciente2 += "El campo nombre no puede estar vacío\n";
        if (contieneDigito(nombre)) 
            MensajeRegistrarPaciente2 += "El campo nombre solo puede contener caracteres alfabéticos\n";
        if (nombre.length() > 15 && !nombre.equals(""))
            MensajeRegistrarPaciente2 += "El campo nombre debe tener una longitud menor que 15 caracteres\n";
    }//GEN-LAST:event_txtNombreFocusLost

    private void txtApellidoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtApellidoFocusLost
        String apellido = txtApellido.getText();
        MensajeRegistrarPaciente3 = "";
        if (apellido.equals(""))
            MensajeRegistrarPaciente3 += "El campo apellido no puede estar vacío\n";
        if (contieneDigito(apellido)) 
            MensajeRegistrarPaciente3 += "El campo apellido solo puede contener caracteres alfabéticos\n";
        if (apellido.length() > 15 && !apellido.equals(""))
            MensajeRegistrarPaciente3 += "El campo apellido debe tener una longitud menor que 15 caracteres\n";
    }//GEN-LAST:event_txtApellidoFocusLost

    private void txtDireccionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDireccionFocusLost
        String direccion = txtDireccion.getText();
        MensajeRegistrarPaciente4 = "";
        if (direccion.equals(""))
            MensajeRegistrarPaciente4 += "El campo dirección no puede estar vacío\n";
        if (direccion.length() > 40 && !direccion.equals(""))
            MensajeRegistrarPaciente4 += "El campo dirección debe tener una longitud menor que 40 caracteres\n";
    }//GEN-LAST:event_txtDireccionFocusLost

    private void txtTelefonoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTelefonoFocusLost
        String telefono = txtTelefono.getText();
        MensajeRegistrarPaciente5 = "";
        if (telefono.equals(""))
            MensajeRegistrarPaciente5 += "El campo teléfono no puede estar vacío\n";
        if (!esNumero(telefono))
            MensajeRegistrarPaciente5 += "El campo teléfono no puede contener espacios en blanco ni caracteres alfabéticos\n";
        if (telefono.length() > 10 && !telefono.equals(""))
            MensajeRegistrarPaciente5 += "El campo teléfono debe tener una longitud menor que 10 dígitos\n";
    }//GEN-LAST:event_txtTelefonoFocusLost

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        String genero = (String) jComboBox1.getSelectedItem();
        MensajeRegistrarPaciente6 = "";
        if (genero.equals("-----"))
            MensajeRegistrarPaciente6 += "No se ha seleccionado ningún sexo\n";
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        String tipodeSangre = (String) jComboBox2.getSelectedItem();
        MensajeRegistrarPaciente7 = "";
        if (tipodeSangre.equals("--"))
            MensajeRegistrarPaciente7 += "No se ha seleccionado ningún tipo de sangre\n";
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    private void txtAñoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAñoKeyReleased
//        Calendar actual = Calendar.getInstance();
//        int añoActual = actual.get(Calendar.YEAR);
//        String año = txtAño.getText();
//
//        if(!esNumero(año))
//        {
//            txtAño.setText("");
//        }
//        try
//        {
//
//            int añoInt = Integer.parseInt(año);
//            if(añoActual > añoInt)
//            txtAño.setText("");
//            if(añoInt <0|| añoInt>2020)
//            txtAño.setText("");
//
//        }catch(Exception e)
//        {
//
//        }
    }//GEN-LAST:event_txtAñoKeyReleased

    private void txtMesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMesKeyReleased
//        String mes = txtMes.getText();
//
//        if(!esNumero(mes))
//        {
//            txtMes.setText("");
//        }
//        try
//        {
//            int mesInt = Integer.parseInt(mes);
//            if(mesInt <1 || mesInt>12)
//            txtMes.setText("");
//
//        }catch(Exception e)
//        {
//
//        }
    }//GEN-LAST:event_txtMesKeyReleased

    private void txtDiaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiaKeyReleased
//        String dia = txtDia.getText();
//
//        if(!esNumero(dia))
//        {
//            txtDia.setText("");
//        }
//        try
//        {
//            int diaInt = Integer.parseInt(dia);
//            if(diaInt <1 || diaInt>31)
//            txtDia.setText("");
//
//        }catch(Exception e)
//        {
//
//        }
    }//GEN-LAST:event_txtDiaKeyReleased

    private void txtDiaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDiaFocusLost
        String dia = txtDia.getText();
        int numdia = 0;
        MensajeRegistrarPaciente8 = "";
        
        if (dia.equals(""))
            MensajeRegistrarPaciente8 += "El campo día de la fecha de nacimiento no puede estar vacío\n";
        
        if(!esNumero(dia))
            MensajeRegistrarPaciente8 += "El día no puede contener espacios ni caracteres alfabéticos\n";
        else{
            if(!dia.equals("")){
                numdia = Integer.parseInt(dia);
                if(numdia < 1 || numdia > 31) // Aquí falta la validación de los meses
                    MensajeRegistrarPaciente8 += "El día solo tiene dígitos entre 1 - 31\n";// Aquí falta la validación de los meses
            }
        }
    }//GEN-LAST:event_txtDiaFocusLost

    private void txtMesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMesFocusLost
        String mes = txtMes.getText();
        int nummes = 0;
        MensajeRegistrarPaciente9 = "";
        
        if (mes.equals(""))
            MensajeRegistrarPaciente9 += "El campo mes de la fecha de nacimiento no puede estar vacío\n";
        
        if(!esNumero(mes))
            MensajeRegistrarPaciente9 += "El mes no puede contener espacios ni caracteres alfabéticos\n";
        else{
            if(!mes.equals("")){
                nummes = Integer.parseInt(mes);
                if(nummes < 1 || nummes > 12)
                    MensajeRegistrarPaciente9 += "El mes solo tiene dígitos entre 1 - 12\n";
            }
        }
    }//GEN-LAST:event_txtMesFocusLost

    private void txtAñoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAñoFocusLost
        String anio = txtAño.getText();
        int numanio = 0;
        Calendar actual = Calendar.getInstance();
        int anioActual = actual.get(Calendar.YEAR);
        MensajeRegistrarPaciente10 = "";
        
        if (anio.equals(""))
            MensajeRegistrarPaciente10 += "El campo año de la fecha de nacimiento no puede estar vacío\n";
        
        if(!esNumero(anio))
            MensajeRegistrarPaciente10 += "El año no puede contener espacios ni caracteres alfabéticos\n";
        else{
            if(!anio.equals("")){
                numanio = Integer.parseInt(anio);
                if(numanio < 1914 || numanio > anioActual)
                    MensajeRegistrarPaciente10 += "Año no válido\n";
            }
        }
    }//GEN-LAST:event_txtAñoFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(registrarPacienteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(registrarPacienteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(registrarPacienteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(registrarPacienteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new registrarPacienteForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblCodigoPaciente;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtAño;
    private javax.swing.JTextField txtCedula;
    private javax.swing.JTextField txtDia;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtMes;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables

    public boolean esNumero(String str) {
        for (char c : str.toCharArray()) {
            if (!Character.isDigit(c)) {
                return false;
            }
        }
        return true;
    }

    public boolean contieneDigito(String str) {

        for (char c : str.toCharArray()) {
            if (Character.isDigit(c) || str.equals("")) {
                return true;
            }
        }
        return false;
    }
}
