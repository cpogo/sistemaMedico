/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fichaMedica;

import ConexionFichaMedica.registrarFicha_Conexion;
import java.util.Calendar;
import javax.swing.JOptionPane;

//===
import java.sql.*;
import conexiondb.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author j3s
 */
public class registroFichaForm extends javax.swing.JFrame {

    java.sql.Date dateserver;
    /**
     * Creates new form registroFichaForm
     */

    public static String MensajeRegistrarFicha = "";
    public static String MensajeRegistrarFicha1 = "";
    public static String MensajeRegistrarFicha2 = "";
    public static String MensajeRegistrarFicha3 = "";
    public static String MensajeRegistrarFicha4 = "";
    public static String MensajeRegistrarFicha5 = "";
    public static String MensajeRegistrarFicha6 = "";
    public static String MensajeRegistrarFicha7 = "";
    public static String MensajeRegistrarFicha8 = "";
    public static String MensajeRegistrarFicha9 = "";

    public registroFichaForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblCedula = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtCodigoPaciente = new javax.swing.JTextField();
        txtRegistro = new javax.swing.JButton();
        txtFreqResp = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtFreqCard = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtPresionArterialDias = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtPresionArterialSis = new javax.swing.JTextField();
        lblNombrePaciente = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtEstatura = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtPeso = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnConsultarCodigo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));

        lblCedula.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("WenQuanYi Micro Hei", 0, 24)); // NOI18N
        jLabel1.setText("Nueva Ficha Médica");

        jLabel8.setText("Código del paciente:");

        txtCodigoPaciente.setBackground(new java.awt.Color(254, 254, 254));
        txtCodigoPaciente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCodigoPacienteKeyReleased(evt);
            }
        });

        txtRegistro.setBackground(new java.awt.Color(75, 75, 253));
        txtRegistro.setForeground(new java.awt.Color(254, 254, 254));
        txtRegistro.setText("Registrar Ficha Médica");
        txtRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRegistroActionPerformed(evt);
            }
        });

        txtFreqResp.setBackground(new java.awt.Color(254, 254, 254));
        txtFreqResp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFreqRespFocusLost(evt);
            }
        });
        txtFreqResp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFreqRespKeyReleased(evt);
            }
        });

        jLabel17.setText("Frecuencia Respiratoria:");

        txtFreqCard.setBackground(new java.awt.Color(254, 254, 254));
        txtFreqCard.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFreqCardFocusLost(evt);
            }
        });
        txtFreqCard.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFreqCardKeyReleased(evt);
            }
        });

        jLabel16.setText("Frecuencia cardiaca:");

        jLabel15.setText("Presión Arterial Diastólica:");

        txtPresionArterialDias.setBackground(new java.awt.Color(254, 254, 254));
        txtPresionArterialDias.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPresionArterialDiasFocusLost(evt);
            }
        });
        txtPresionArterialDias.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPresionArterialDiasKeyReleased(evt);
            }
        });

        jLabel14.setText("Presión Arterial Sistólica:");

        txtPresionArterialSis.setBackground(new java.awt.Color(254, 254, 254));
        txtPresionArterialSis.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPresionArterialSisFocusLost(evt);
            }
        });
        txtPresionArterialSis.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPresionArterialSisKeyReleased(evt);
            }
        });

        lblNombrePaciente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel7.setText("Cédula del paciente:");

        jLabel3.setText("Estatura:");

        txtEstatura.setBackground(new java.awt.Color(254, 254, 254));
        txtEstatura.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEstaturaFocusLost(evt);
            }
        });
        txtEstatura.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEstaturaKeyReleased(evt);
            }
        });

        jLabel13.setText("Peso:");

        txtPeso.setBackground(new java.awt.Color(254, 254, 254));
        txtPeso.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPesoFocusLost(evt);
            }
        });
        txtPeso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesoKeyReleased(evt);
            }
        });

        jLabel6.setText("Nombre del paciente:");

        btnConsultarCodigo.setBackground(new java.awt.Color(75, 75, 253));
        btnConsultarCodigo.setForeground(new java.awt.Color(254, 254, 254));
        btnConsultarCodigo.setText("Consultar");
        btnConsultarCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarCodigoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel14)
                            .addComponent(jLabel17)
                            .addComponent(jLabel16)
                            .addComponent(jLabel13)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel3)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtPresionArterialSis, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(txtRegistro))
                            .addComponent(txtPresionArterialDias, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFreqCard, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCedula, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEstatura, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtCodigoPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnConsultarCodigo))
                            .addComponent(txtPeso, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFreqResp, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNombrePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel1))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtCodigoPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConsultarCodigo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(lblNombrePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(lblCedula, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEstatura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPeso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPresionArterialSis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(txtRegistro))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPresionArterialDias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFreqCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFreqResp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultarCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarCodigoActionPerformed
        String codigoPac = txtCodigoPaciente.getText();
        if (codigoPac.equals("")){
            JOptionPane.showMessageDialog(rootPane, "El código del paciente no puede estar vacío", "Advertencia", 2);
            txtCodigoPaciente.setBackground(java.awt.Color.PINK);
        }else if (!esNumero(codigoPac)){
            JOptionPane.showMessageDialog(rootPane, "El código del paciente no puede contener espacios en blanco ni caracteres alfabéticos", "Advertencia", 2);
            txtCodigoPaciente.setBackground(java.awt.Color.PINK);
        }else
            txtCodigoPaciente.setBackground(java.awt.Color.WHITE);

//===
		if(consultarFicha(codigoPac)){
		}else{
			JOptionPane.showMessageDialog(rootPane, "No encontrado", "Advertencia", 2);
		}
    }//GEN-LAST:event_btnConsultarCodigoActionPerformed

    private void txtRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRegistroActionPerformed
        String estatura = txtEstatura.getText();
        String peso = txtPeso.getText();
        String presionAsis = txtPresionArterialSis.getText();
        String presionDias = txtPresionArterialDias.getText();
        String freqCard = txtFreqCard.getText();
        String freqResp = txtFreqResp.getText();

        try {
            dateserver = registrarFicha_Conexion.callProcedureGetFechaServidor();
        } catch (SQLException ex) {
            Logger.getLogger(registroFichaForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        MensajeRegistrarFicha = "";
        MensajeRegistrarFicha = MensajeRegistrarFicha1 + MensajeRegistrarFicha2 + MensajeRegistrarFicha3 + MensajeRegistrarFicha4 + MensajeRegistrarFicha5 + MensajeRegistrarFicha6 + MensajeRegistrarFicha7 + MensajeRegistrarFicha8 + MensajeRegistrarFicha9;

        if (estatura.equals("") && MensajeRegistrarFicha1.equals("")){
            MensajeRegistrarFicha += "El campo estatura no puede estar vacío\n";
            txtEstatura.setBackground(java.awt.Color.PINK);
        }else{
            if(!MensajeRegistrarFicha1.equals(""))
                txtEstatura.setBackground(java.awt.Color.PINK);
            else
                txtEstatura.setBackground(java.awt.Color.WHITE);
        }

        if (peso.equals("") && MensajeRegistrarFicha2.equals("")){
            MensajeRegistrarFicha += "El campo peso no puede estar vacío\n";
            txtPeso.setBackground(java.awt.Color.PINK);
        }else{
            if(!MensajeRegistrarFicha2.equals(""))
                txtPeso.setBackground(java.awt.Color.PINK);
            else
                txtPeso.setBackground(java.awt.Color.WHITE);
        }

        if (presionAsis.equals("") && MensajeRegistrarFicha3.equals("")){
            MensajeRegistrarFicha += "El campo presión sistólica no puede estar vacío\n";
            txtPresionArterialSis.setBackground(java.awt.Color.PINK);
        }else{
            if(!MensajeRegistrarFicha3.equals(""))
                txtPresionArterialSis.setBackground(java.awt.Color.PINK);
            else
                txtPresionArterialSis.setBackground(java.awt.Color.WHITE);
        }

        if (presionDias.equals("") && MensajeRegistrarFicha4.equals("")){
            MensajeRegistrarFicha += "El campo presión diastólica no puede estar vacío\n";
            txtPresionArterialDias.setBackground(java.awt.Color.PINK);
        }else{
            if(!MensajeRegistrarFicha4.equals(""))
                txtPresionArterialDias.setBackground(java.awt.Color.PINK);
            else
                txtPresionArterialDias.setBackground(java.awt.Color.WHITE);
        }

        if (freqCard.equals("") && MensajeRegistrarFicha5.equals("")){
            MensajeRegistrarFicha += "El campo frecuencia cardiaca no puede estar vacío\n";
            txtFreqCard.setBackground(java.awt.Color.PINK);
        }else{
            if(!MensajeRegistrarFicha5.equals(""))
                txtFreqCard.setBackground(java.awt.Color.PINK);
            else
                txtFreqCard.setBackground(java.awt.Color.WHITE);
        }

        if (freqResp.equals("") && MensajeRegistrarFicha6.equals("")){
            MensajeRegistrarFicha += "El campo frecuencia respiratoria no puede estar vacío\n";
            txtFreqResp.setBackground(java.awt.Color.PINK);
        }else{
            if(!MensajeRegistrarFicha6.equals(""))
                txtFreqResp.setBackground(java.awt.Color.PINK);
            else
                txtFreqResp.setBackground(java.awt.Color.WHITE);
        }

//        if (dia.equals("") && MensajeRegistrarFicha7.equals("")){
//            MensajeRegistrarFicha += "El campo día no puede estar vacío\n";
//            txtDia.setBackground(java.awt.Color.PINK);
//        }else{
//            if(!MensajeRegistrarFicha7.equals(""))
//                txtDia.setBackground(java.awt.Color.PINK);
//            else
//                txtDia.setBackground(java.awt.Color.WHITE);
//        }
//
//        if (mes.equals("") && MensajeRegistrarFicha8.equals("")){
//            MensajeRegistrarFicha += "El campo mes no puede estar vacío\n";
//            txtMes.setBackground(java.awt.Color.PINK);
//        }else{
//            if(!MensajeRegistrarFicha8.equals(""))
//                txtMes.setBackground(java.awt.Color.PINK);
//            else
//                txtMes.setBackground(java.awt.Color.WHITE);
//        }
//
//        if (anio.equals("") && MensajeRegistrarFicha9.equals("")){
//            MensajeRegistrarFicha += "El campo año no puede estar vacío\n";
//            txtAño.setBackground(java.awt.Color.PINK);
//        }else{
//            if(!MensajeRegistrarFicha9.equals(""))
//                txtAño.setBackground(java.awt.Color.PINK);
//            else
//                txtAño.setBackground(java.awt.Color.WHITE);
      //  }

        if(MensajeRegistrarFicha.equals("")){
//==
			registrarFicha();
            JOptionPane.showMessageDialog(rootPane, "Registro exitoso", "Mensaje", 1);
            this.dispose();            
        }else
            JOptionPane.showMessageDialog(rootPane, MensajeRegistrarFicha, "Advertencia", 2);

    }//GEN-LAST:event_txtRegistroActionPerformed

    private void txtCodigoPacienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoPacienteKeyReleased
//        String codigo = txtCodigoPaciente.getText();
//        if(!esNumero(codigo))
//            txtCodigoPaciente.setText("");
//        try
//        {
//            int codigoInt = Integer.parseInt(codigo);
//            if(codigoInt<0|| codigoInt>999999999)
//                txtCodigoPaciente.setText("");
//
//        }catch(Exception e)
//        {}
    }//GEN-LAST:event_txtCodigoPacienteKeyReleased

    private void txtEstaturaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEstaturaKeyReleased
//        String estatura = txtEstatura.getText();
//        if(!esNumero(estatura))
//            txtEstatura.setText("");
//        try
//        {
//            int estaturaInt = Integer.parseInt(estatura);
//            if(estaturaInt<1|| estaturaInt>270)
//                txtEstatura.setText("");
//
//        }catch(Exception e)
//        {}
    }//GEN-LAST:event_txtEstaturaKeyReleased

    private void txtPesoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesoKeyReleased
//        String peso = txtPeso.getText();
//        if(!esNumero(peso))
//            txtPeso.setText("");
//        try
//        {
//            int pesoInt = Integer.parseInt(peso);
//            if(pesoInt<1|| pesoInt>500)
//                txtPeso.setText("");
//
//
//        }catch(Exception e)
//        {}
    }//GEN-LAST:event_txtPesoKeyReleased

    private void txtPresionArterialSisKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPresionArterialSisKeyReleased
//        String presion = txtPresionArterialSis.getText();
//        if(!esNumero(presion))
//            txtPresionArterialSis.setText("");
//        try
//        {
//            int presionInt = Integer.parseInt(presion);
//            if(presionInt<1|| presionInt>500)
//                txtPresionArterialSis.setText("");
//
//
//        }catch(Exception e)
//        {}
    }//GEN-LAST:event_txtPresionArterialSisKeyReleased

    private void txtPresionArterialDiasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPresionArterialDiasKeyReleased
//        String presion = txtPresionArterialDias.getText();
//        if(!esNumero(presion))
//            txtPresionArterialDias.setText("");
//        try
//        {
//            int presionInt = Integer.parseInt(presion);
//            if(presionInt<1|| presionInt>500)
//                txtPresionArterialDias.setText("");
//
//        }catch(Exception e)
//        {}
    }//GEN-LAST:event_txtPresionArterialDiasKeyReleased

    private void txtFreqCardKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFreqCardKeyReleased
//        String frecuencia = txtFreqCard.getText();
//        if(!esNumero(frecuencia))
//            txtFreqCard.setText("");
//        try
//        {
//            int frecuenciaInt = Integer.parseInt(frecuencia);
//            if(frecuenciaInt<1|| frecuenciaInt>500)
//                txtFreqCard.setText("");
//
//
//        }catch(Exception e)
//        {}
    }//GEN-LAST:event_txtFreqCardKeyReleased

    private void txtFreqRespKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFreqRespKeyReleased
//        String frecuencia = txtFreqResp.getText();
//        if(!esNumero(frecuencia))
//            txtFreqResp.setText("");
//        try
//        {
//            int frecuenciaInt = Integer.parseInt(frecuencia);
//            if(frecuenciaInt<1|| frecuenciaInt>500)
//                txtFreqResp.setText("");
//
//
//        }catch(Exception e)
//        {}
    }//GEN-LAST:event_txtFreqRespKeyReleased

    private void txtEstaturaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEstaturaFocusLost
        String estatura = txtEstatura.getText();
        MensajeRegistrarFicha1 = "";
        int estaturaNum = 0;

        if(estatura.equals(""))
            MensajeRegistrarFicha1 += "El campo estatura está vacío\n";

        if(!esNumero(estatura))
            MensajeRegistrarFicha1 += "El campo estatura solo puede estar formado por números\n";
        else{
            estaturaNum = Integer.parseInt(estatura);
            if(estaturaNum<1|| estaturaNum>270)//Buscar estatura mínima y máximo
            MensajeRegistrarFicha1 += "El campo estatura se encuentra fuera del rango\n";
        }
    }//GEN-LAST:event_txtEstaturaFocusLost

    private void txtPesoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPesoFocusLost
        String peso = txtPeso.getText();
        MensajeRegistrarFicha2 = "";
        int pesoNum = 0;

        if(peso.equals(""))
            MensajeRegistrarFicha2 += "El campo peso está vacío\n";

        if(!esNumero(peso))
            MensajeRegistrarFicha2 += "El campo peso solo puede estar formado por números\n";
        else{
            pesoNum = Integer.parseInt(peso);
            if(pesoNum<1|| pesoNum>500)//Buscar peso mínima y máximo
            MensajeRegistrarFicha2 += "El campo peso se encuentra fuera del rango\n";
        }
    }//GEN-LAST:event_txtPesoFocusLost

    private void txtPresionArterialSisFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPresionArterialSisFocusLost
        String presion = txtPresionArterialSis.getText();
        MensajeRegistrarFicha3 = "";
        int presionNum = 0;

        if(presion.equals(""))
            MensajeRegistrarFicha3 += "El campo presión arterial sistólica está vacío\n";

        if(!esNumero(presion))
            MensajeRegistrarFicha3 += "El campo presión arterial sistólica solo puede estar formado por números\n";
        else{
            presionNum = Integer.parseInt(presion);
            if(presionNum<1|| presionNum>160)//Buscar presión mínima y máximo
            MensajeRegistrarFicha3 += "El campo presión arterial sistólica se encuentra fuera del rango\n";
        }
    }//GEN-LAST:event_txtPresionArterialSisFocusLost

    private void txtPresionArterialDiasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPresionArterialDiasFocusLost
        String presion = txtPresionArterialDias.getText();
        MensajeRegistrarFicha4 = "";
        int presionNum = 0;

        if(presion.equals(""))
            MensajeRegistrarFicha4 += "El campo presión arterial diastólica está vacío\n";

        if(!esNumero(presion))
            MensajeRegistrarFicha4 += "El campo presión arterial diastólica solo puede estar formado por números\n";
        else{
            presionNum = Integer.parseInt(presion);
            if(presionNum<1|| presionNum>160)//Buscar presión mínima y máximo
            MensajeRegistrarFicha4 += "El campo presión arterial diastólica se encuentra fuera del rango\n";
        }
    }//GEN-LAST:event_txtPresionArterialDiasFocusLost

    private void txtFreqCardFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFreqCardFocusLost
        String freq = txtFreqCard.getText();
        MensajeRegistrarFicha5 = "";
        int freqNum = 0;

        if(freq.equals(""))
            MensajeRegistrarFicha5 += "El campo frecuencia cardiaca está vacío\n";

        if(!esNumero(freq))
            MensajeRegistrarFicha5 += "El campo frecuencia cardiaca solo puede estar formado por números\n";
        else{
            freqNum = Integer.parseInt(freq);
            if(freqNum<50|| freqNum>100)//Buscar frecuencia mínima y máximo
            MensajeRegistrarFicha5 += "El campo frecuencia cardiaca se encuentra fuera del rango\n";
        }
    }//GEN-LAST:event_txtFreqCardFocusLost

    private void txtFreqRespFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFreqRespFocusLost
        String freq = txtFreqResp.getText();
        MensajeRegistrarFicha6 = "";
        int freqNum = 0;

        if(freq.equals(""))
            MensajeRegistrarFicha6 += "El campo frecuencia respiratoria está vacío\n";

        if(!esNumero(freq))
            MensajeRegistrarFicha6 += "El campo frecuencia respiratoria solo puede estar formado por números\n";
        else{
            freqNum = Integer.parseInt(freq);
            if(freqNum<50|| freqNum>100)//Buscar frecuencia mínima y máximo
            MensajeRegistrarFicha6 += "El campo frecuencia respiratoria se encuentra fuera del rango\n";
        }
    }//GEN-LAST:event_txtFreqRespFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(registroFichaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(registroFichaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(registroFichaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(registroFichaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new registroFichaForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConsultarCodigo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblCedula;
    private javax.swing.JLabel lblNombrePaciente;
    private javax.swing.JTextField txtCodigoPaciente;
    private javax.swing.JTextField txtEstatura;
    private javax.swing.JTextField txtFreqCard;
    private javax.swing.JTextField txtFreqResp;
    private javax.swing.JTextField txtPeso;
    private javax.swing.JTextField txtPresionArterialDias;
    private javax.swing.JTextField txtPresionArterialSis;
    private javax.swing.JButton txtRegistro;
    // End of variables declaration//GEN-END:variables

    public boolean esNumero(String str) {
        for (char c: str.toCharArray())
        {
            if (!Character.isDigit(c))
                    return false;
        }
        return true;
    }

//===
	public boolean consultarFicha(String cedula){
		boolean valido = false;


		Connection conn = null;
		CallableStatement stmt = null;

		try{
		conn = conexiondb.getDBConnection();

		String sql = "{call sp_paciente_select_cedula(?)}";
		stmt = conn.prepareCall(sql);
		stmt.setString(1, cedula);
		stmt.execute();

		ResultSet rs = stmt.getResultSet();
		valido = rs.next();
		if(valido){
			this.lblNombrePaciente.setText(rs.getString("nombre") + " " + rs.getString("apellido"));
			this.lblCedula.setText(rs.getString("cedula"));
			//this.lblCodigo.setText(rs.getString("ficha"));
		}else{
			this.lblNombrePaciente.setText("");
			this.lblCedula.setText("");
			//this.lblCodigo.setText("");
		}
		rs.close();

		stmt.close();
		conn.close();
		}catch(SQLException se){
			se.printStackTrace();
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			try{
				if(stmt!=null) stmt.close();
			}catch(SQLException se2){
			}
			try{
				if(conn!=null) conn.close();
			}catch(SQLException se){
				se.printStackTrace();
			}
		}


		return valido;

	}

	public boolean registrarFicha(){
		boolean valido = false;


		Connection conn = null;
		CallableStatement stmt = null;

		try{
		conn = conexiondb.getDBConnection();

		String sql = "{call sp_ficha_medica_insert_cedula(?,?,?,?,?,?,?,?)}";
		stmt = conn.prepareCall(sql);
		stmt.setString(1, this.lblCedula.getText());
		stmt.setString(2, this.txtEstatura.getText());
		stmt.setString(3, this.txtPeso.getText());
		stmt.setString(4, this.txtPresionArterialSis.getText());
		stmt.setString(5, this.txtPresionArterialDias.getText());
		stmt.setString(6, this.txtFreqCard.getText());
		stmt.setString(7, this.txtFreqResp.getText());
		stmt.setDate(8, dateserver);
		stmt.execute();

		valido = true;

//		ResultSet rs = stmt.getResultSet();
//		valido = rs.next();
//		if(valido){
//			this.lblNombrePaciente.setText(rs.getString("nombre") + " " + rs.getString("apellido"));
//			this.lblCedula.setText(rs.getString("cedula"));
//			//this.lblCodigo.setText(rs.getString("ficha"));
//		}else{
//			this.lblNombrePaciente.setText("");
//			this.lblCedula.setText("");
//			//this.lblCodigo.setText("");
//		}
//		rs.close();

		stmt.close();
		conn.close();
		}catch(SQLException se){
			se.printStackTrace();
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			try{
				if(stmt!=null) stmt.close();
			}catch(SQLException se2){
			}
			try{
				if(conn!=null) conn.close();
			}catch(SQLException se){
				se.printStackTrace();
			}
		}


		return valido;

	}

}
