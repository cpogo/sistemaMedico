/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package citaMedica;

//===
//import conexion.conexiondb;
import conexiondb.*;

import java.awt.Color;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;

/**
 *
 * @author j3s
 */
public class modificarCitaForm extends javax.swing.JFrame {

    Color rojo = new Color(254,54,54);

    /**
     * Creates new form modificarCitaForm
     */
    public modificarCitaForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblNombrePaciente = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        btnModificar = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblCodigoPaciente = new javax.swing.JLabel();
        btnHorasDisponibles = new javax.swing.JButton();
        txtAño = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtMes = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtDia = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        txtCedulaPaciente = new javax.swing.JTextField();
        btnConsultarCodigo = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(250, 250, 250));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("WenQuanYi Micro Hei", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Modificar Cita Médica");

        lblNombrePaciente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel9.setText("Fecha / Hora / Turno:");

        jComboBox1.setEnabled(false);

        btnModificar.setBackground(new java.awt.Color(75, 75, 253));
        btnModificar.setFont(new java.awt.Font("WenQuanYi Micro Hei", 1, 13)); // NOI18N
        btnModificar.setForeground(new java.awt.Color(254, 254, 254));
        btnModificar.setText("Modificar Cita");
        btnModificar.setEnabled(false);
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        jLabel10.setText("Modificar:");

        jLabel6.setText("Nombre del paciente:");

        jLabel7.setText("Código del paciente:");

        jLabel8.setText("Cédula del paciente:");

        lblCodigoPaciente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnHorasDisponibles.setBackground(new java.awt.Color(75, 75, 253));
        btnHorasDisponibles.setFont(new java.awt.Font("WenQuanYi Micro Hei", 1, 13)); // NOI18N
        btnHorasDisponibles.setForeground(new java.awt.Color(254, 254, 254));
        btnHorasDisponibles.setText("Horas Disponibles");
        btnHorasDisponibles.setEnabled(false);
        btnHorasDisponibles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHorasDisponiblesActionPerformed(evt);
            }
        });

        txtAño.setBackground(new java.awt.Color(254, 254, 254));
        txtAño.setEnabled(false);
        txtAño.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAñoKeyTyped(evt);
            }
        });

        jLabel13.setText("Año:");

        txtMes.setBackground(new java.awt.Color(254, 254, 254));
        txtMes.setEnabled(false);
        txtMes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMesKeyTyped(evt);
            }
        });

        jLabel12.setText("Mes:");

        txtDia.setBackground(new java.awt.Color(254, 254, 254));
        txtDia.setEnabled(false);
        txtDia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDiaKeyTyped(evt);
            }
        });

        jLabel11.setText("Día:");

        jLabel3.setText("Fecha:");

        jLabel2.setText("Citas:");

        jLabel5.setText("Turno / Hora:");

        jComboBox3.setEnabled(false);

        txtCedulaPaciente.setBackground(new java.awt.Color(254, 254, 254));
        txtCedulaPaciente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCedulaPacienteKeyTyped(evt);
            }
        });

        btnConsultarCodigo.setBackground(new java.awt.Color(75, 75, 253));
        btnConsultarCodigo.setFont(new java.awt.Font("WenQuanYi Micro Hei", 1, 13)); // NOI18N
        btnConsultarCodigo.setForeground(new java.awt.Color(254, 254, 254));
        btnConsultarCodigo.setText("Consultar");
        btnConsultarCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarCodigoActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(75, 75, 253));
        btnEliminar.setFont(new java.awt.Font("WenQuanYi Micro Hei", 1, 13)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(254, 254, 254));
        btnEliminar.setText("Cancelar Cita");
        btnEliminar.setEnabled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCodigoPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNombrePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtCedulaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnConsultarCodigo))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(btnModificar))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jComboBox3, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel11)
                                                .addGap(2, 2, 2)
                                                .addComponent(txtDia, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel12)
                                                .addGap(3, 3, 3)
                                                .addComponent(txtMes, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel13)
                                        .addGap(1, 1, 1)
                                        .addComponent(txtAño, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnEliminar)
                                    .addComponent(btnHorasDisponibles))))))
                .addGap(0, 14, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtCedulaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConsultarCodigo))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(lblNombrePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(lblCodigoPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar))
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11)
                        .addComponent(jLabel12)
                        .addComponent(jLabel13)
                        .addComponent(txtAño)
                        .addComponent(btnHorasDisponibles)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnModificar)
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        try{
            callProcedureInsertarNuevaCita();
            callProcedureCambiarIdEstadoCita(4);
            JOptionPane.showMessageDialog(rootPane, "Cita modificada", "Mensaje", 1);
        }catch(Exception e){
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(rootPane, "No se puede modificar", "Mensaje", 1);
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnHorasDisponiblesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHorasDisponiblesActionPerformed
        String dia = txtDia.getText();
        String mes = txtMes.getText();
        String año = txtAño.getText();
        Calendar actual = Calendar.getInstance();
        int añoActual = actual.get(Calendar.YEAR);
        int diaActual = actual.get(Calendar.DAY_OF_MONTH);
        int mesActual = actual.get(Calendar.MONTH) + 1;
        String msg1 = "1", msg2 = "2", msg3 = "3"; //Cuando están vacíos es porque no hay ningún error en los datos
        String turnosNoDisponibles[] = new String[24];
        jComboBox3.removeAllItems();
        jComboBox3.setEnabled(false);

        if(dia.equals("")){
            JOptionPane.showMessageDialog(rootPane, "El campo día está vacío", "Advertencia", 2);
            txtDia.setBackground(rojo);
            msg1 = "1";
        }else if(!esNumero(dia)){
            JOptionPane.showMessageDialog(rootPane, "El campo día solo está formado por números", "Advertencia", 2);
            txtDia.setBackground(rojo);
            msg1 = "1";
        }else if(Integer.parseInt(dia) < 0 || Integer.parseInt(dia) > 31){
            JOptionPane.showMessageDialog(rootPane, "Día Inválido: Solo puede tomar el valor de 1 - 31", "Advertencia", 2);
            txtDia.setBackground(rojo);
            msg1 = "1";
        }else{
            txtDia.setBackground(java.awt.Color.WHITE);
            msg1 = "";
        }

        if(!dia.equals("") && !mes.equals("") && !año.equals("") && esNumero(mes) && esNumero(año) && esNumero(dia) && (Integer.parseInt(mes)<12 && Integer.parseInt(mes)>0)){
            if(Integer.parseInt(año) == añoActual && Integer.parseInt(mes) == mesActual){
                if(Integer.parseInt(dia) < diaActual){
                    JOptionPane.showMessageDialog(rootPane, "Día inválido: Se ha escogido un día anterior al actual", "Advertencia", 2);
                    txtDia.setBackground(rojo);
                    msg1 = "1";
                }else{
                    txtDia.setBackground(java.awt.Color.WHITE);
                    msg1 = "";
                }
            }else if(Integer.parseInt(año) == añoActual && Integer.parseInt(mes) > mesActual){
                if(Integer.parseInt(dia) < 0 || Integer.parseInt(dia) > 31){
                    JOptionPane.showMessageDialog(rootPane, "Día Inválido: Solo puede tomar el valor de 1 - 31", "Advertencia", 2);
                    txtDia.setBackground(rojo);
                    msg1 = "1";
                }else{
                    txtDia.setBackground(java.awt.Color.WHITE);
                    msg1 = "";
                }
            }else if(Integer.parseInt(año) > añoActual){
                if(Integer.parseInt(dia) < 0 || Integer.parseInt(dia) > 31){
                    JOptionPane.showMessageDialog(rootPane, "Día Inválido: Solo puede tomar el valor de 1 - 31", "Advertencia", 2);
                    txtDia.setBackground(rojo);
                    msg1 = "1";
                }else{
                    txtDia.setBackground(java.awt.Color.WHITE);
                    msg1 = "";
                }
            }
        }

        if(mes.equals("")){
            JOptionPane.showMessageDialog(rootPane, "El campo mes está vacío", "Advertencia", 2);
            txtMes.setBackground(rojo);
            msg2 = "2";
        }else if(!esNumero(mes)){
            JOptionPane.showMessageDialog(rootPane, "El campo mes solo está formado por números", "Advertencia", 2);
            txtMes.setBackground(rojo);
            msg2 = "2";
        }else if(Integer.parseInt(mes)<1 || Integer.parseInt(mes)>12){
            JOptionPane.showMessageDialog(rootPane, "Mes inválido: Solo puede tomar el valor de 1 - 12", "Advertencia", 2);
            txtMes.setBackground(rojo);
            msg2 = "2";
        }else{
            txtMes.setBackground(java.awt.Color.WHITE);
            msg2 = "";
        }

        if(!año.equals("") && !mes.equals("") && esNumero(año) && esNumero(mes) && (Integer.parseInt(mes)<12 && Integer.parseInt(mes)>0)){
            if(Integer.parseInt(año) == añoActual) {
                if(Integer.parseInt(mes) < mesActual){
                    JOptionPane.showMessageDialog(rootPane, "Mes inválido: Se ha escogido un mes anterior al actual", "Advertencia", 2);
                    txtMes.setBackground(rojo);
                    msg2 = "2";
                }else{
                    txtMes.setBackground(java.awt.Color.WHITE);
                    msg2 = "";
                }
            }else if(Integer.parseInt(año) > añoActual){
                if(Integer.parseInt(mes)<1 || Integer.parseInt(mes)>12){
                    JOptionPane.showMessageDialog(rootPane, "Mes inválido: Solo puede tomar el valor de 1 - 12", "Advertencia", 2);
                    txtMes.setBackground(rojo);
                    msg2 = "2";
                }else{
                    txtMes.setBackground(java.awt.Color.WHITE);
                    msg2 = "";
                }
            }
        }

        if(año.equals("")){
            JOptionPane.showMessageDialog(rootPane, "El campo año está vacío", "Advertencia", 2);
            txtAño.setBackground(rojo);
            msg3 = "3";
        }else if(!esNumero(año)){
            JOptionPane.showMessageDialog(rootPane, "El campo año solo está formado por números", "Advertencia", 2);
            txtAño.setBackground(rojo);
            msg3 = "3";
        }else if(Integer.parseInt(año) < añoActual || Integer.parseInt(año) > añoActual+2){
            JOptionPane.showMessageDialog(rootPane, "Año inválido", "Advertencia", 2);
            txtAño.setBackground(rojo);
            msg3 = "3";
        } else{
            txtAño.setBackground(java.awt.Color.WHITE);
            msg3 = "";
        }

        if(msg1.equals("") && msg2.equals("") && msg3.equals("")){
            try{
                turnosNoDisponibles = callProcedureGetHorasReservadas(Integer.parseInt(dia), Integer.parseInt(mes), Integer.parseInt(año));
            }catch (SQLException e) {
                System.out.println(e.getMessage());
            }
            cargarHorasTurnoDisponiblesCombo(turnosNoDisponibles, Integer.parseInt(dia), Integer.parseInt(mes), Integer.parseInt(año));
            if(jComboBox3.getItemCount() != 0){
                jComboBox3.setEnabled(true);
                btnModificar.setEnabled(true);
            }
        }

    }//GEN-LAST:event_btnHorasDisponiblesActionPerformed

    private void txtAñoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAñoKeyTyped
        if(txtAño.getText().length()>3)
        evt.consume();
    }//GEN-LAST:event_txtAñoKeyTyped

    private void txtMesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMesKeyTyped
        if(txtMes.getText().length()>1)
        evt.consume();
    }//GEN-LAST:event_txtMesKeyTyped

    private void txtDiaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiaKeyTyped
        if(txtDia.getText().length()>1)
        evt.consume();
    }//GEN-LAST:event_txtDiaKeyTyped

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        if(!lblCodigoPaciente.getText().equals("")){
            jComboBox1.setEnabled(true);
            txtDia.setEnabled(true);
            txtMes.setEnabled(true);
            txtAño.setEnabled(true);
            btnHorasDisponibles.setEnabled(true);
        }else{
            jComboBox1.setEnabled(false);
            txtDia.setEnabled(false);
            txtMes.setEnabled(false);
            txtAño.setEnabled(false);
            btnHorasDisponibles.setEnabled(false);
        }
    }//GEN-LAST:event_jPanel1MouseMoved

    private void btnConsultarCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarCodigoActionPerformed
        String cedula = txtCedulaPaciente.getText();
        jComboBox1.removeAllItems();
        jComboBox1.setEnabled(false);
        if(cedula.equals("")){
            JOptionPane.showMessageDialog(rootPane, "El campo cédula del paciente está vacío", "Advertencia", 2);
            txtCedulaPaciente.setBackground(rojo);
        }else if (!esNumero(cedula)) {
            JOptionPane.showMessageDialog(rootPane, "La cédula del paciente no puede contener caracteres que no sean numéricos", "Error", 1);
            txtCedulaPaciente.setBackground(rojo);
        }else if (cedula.length() != 10){
            JOptionPane.showMessageDialog(rootPane, "La cédula del paciente solo puede tener 10 dígitos", "Advertencia", 2);
        }else{
            txtCedulaPaciente.setBackground(java.awt.Color.WHITE);
            try{
                callProcedureGetDatosPaciente(cedula);
                if(!lblCodigoPaciente.getText().equals("")){
                    jComboBox1.setEnabled(true);
                    btnEliminar.setEnabled(true);
                    txtDia.setEnabled(true);
                    txtMes.setEnabled(true);
                    txtAño.setEnabled(true);
                    btnHorasDisponibles.setEnabled(true);
                    callProcedureGetCitasPaciente(Integer.parseInt(lblCodigoPaciente.getText()));
                }
            }catch (SQLException e) {
                System.out.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_btnConsultarCodigoActionPerformed

    private void txtCedulaPacienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCedulaPacienteKeyTyped
        if(txtCedulaPaciente.getText().length()>9)
        evt.consume();
    }//GEN-LAST:event_txtCedulaPacienteKeyTyped

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        try{
            callProcedureCambiarIdEstadoCita(3);
            jComboBox1.setEnabled(false);
            txtDia.setEnabled(false);
            txtMes.setEnabled(false);
            txtAño.setEnabled(false);
            btnHorasDisponibles.setEnabled(false);
            JOptionPane.showMessageDialog(rootPane, "Cita cancelada", "Mensaje", 1);
        }catch(Exception e){
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(rootPane, "No se cancelar", "Mensaje", 1);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(modificarCitaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(modificarCitaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(modificarCitaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(modificarCitaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new modificarCitaForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConsultarCodigo;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnHorasDisponibles;
    private javax.swing.JButton btnModificar;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblCodigoPaciente;
    private javax.swing.JLabel lblNombrePaciente;
    private javax.swing.JTextField txtAño;
    private javax.swing.JTextField txtCedulaPaciente;
    private javax.swing.JTextField txtDia;
    private javax.swing.JTextField txtMes;
    // End of variables declaration//GEN-END:variables
    public boolean esNumero(String str) {
        for (char c : str.toCharArray()) {
            if (!Character.isDigit(c)) {
                return false;
            }
        }
        return true;
    }

    private void callProcedureGetDatosPaciente(String cedula) throws SQLException {
        Connection dbConnection = null;
        CallableStatement callableStatement = null;
        String getDatosPaciente = "{call getDatosPaciente(?)}";
        ResultSet rs;
        try {
                dbConnection = conexiondb.getDBConnection();
                callableStatement = dbConnection.prepareCall(getDatosPaciente, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                callableStatement.setString(1, cedula);
                //MariaDB
                rs = callableStatement.executeQuery();// execute turnoMaximoFechaActual store procedure
                //MySQL
                //callableStatement.executeQuery();// execute turnoMaximoFechaActual store procedure
                if(rs.next()){
                    String str1 = rs.getString(3);
                    String str2 = rs.getString(4);
                    lblNombrePaciente.setText(rs.getString(3) + " " + rs.getString(4));
                    lblCodigoPaciente.setText(rs.getString(1));
                }else{
                    JOptionPane.showMessageDialog(rootPane, "No se encontró al paciente con la cédula " + cedula);
                    lblNombrePaciente.setText("");
                    lblCodigoPaciente.setText("");
                }
        } catch (SQLException e) {
                System.out.println(e.getMessage());
        } finally {
                if (callableStatement != null)
                        callableStatement.close();
                if (dbConnection != null)
                        dbConnection.close();
        }
    }

    private void callProcedureGetCitasPaciente(int codigo) throws SQLException {
        Connection dbConnection = null;
        CallableStatement callableStatement = null;
        String buscarCitasPaciente = "{call buscarCitasPaciente(?)}";
        String citaDatos = "";
        ResultSet rs;
        try {
            dbConnection = conexiondb.getDBConnection();
            callableStatement = dbConnection.prepareCall(buscarCitasPaciente, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            callableStatement.setInt(1, codigo);
            //MariaDB
            rs = callableStatement.executeQuery();// execute turnoMaximoFechaActual store procedure
            //MySQL
            //callableStatement.executeQuery();// execute turnoMaximoFechaActual store procedure
            while(rs.next()){
                citaDatos = "";
                citaDatos = citaDatos + rs.getString(2) + " / " + rs.getString(3) + " / " + rs.getString(4);
                jComboBox1.addItem(citaDatos);
            }
        } catch (SQLException e) {
                System.out.println(e.getMessage());
        } finally {
                if (callableStatement != null)
                        callableStatement.close();
                if (dbConnection != null)
                        dbConnection.close();
        }
    }

    private String[] callProcedureGetHorasReservadas(int dia, int mes, int año) throws SQLException{
        Connection dbConnection = null;
        CallableStatement callableStatement = null;
        String filtrarCitaFecha = "{call filtrarCitaFecha(?)}";
        ResultSet rs;
        String result[] = new String[24];
        int fila=0;
        try{
            dbConnection = conexiondb.getDBConnection();
            Calendar c = Calendar.getInstance();
            c.set(año, mes-1, dia);
            java.sql.Date sqlDate = new java.sql.Date(c.getTimeInMillis());
            sqlDate.toLocalDate();
            //System.out.println("utilDate:" + c);
            //System.out.println("sqlDate:" + sqlDate);
            //System.out.println("Date:" + sqlDate.toLocalDate());
            callableStatement = dbConnection.prepareCall(filtrarCitaFecha, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            callableStatement.setDate(1, sqlDate);
            rs = callableStatement.executeQuery();
            while(rs.next()){
                result[fila]=rs.getString(4);//Turno
                //result[fila+1][columna]=rs.getString(3);//Hora
                fila++;
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
                if (callableStatement != null)
                        callableStatement.close();
                if (dbConnection != null)
                        dbConnection.close();
        }
        return result;
    }

    private void cargarHorasTurnoDisponiblesCombo(String arrayturno[], int dia, int mes, int año){
        int fila, turno, noEstaDisponible, turnoinicial = 1;
        String turnoHora;
        Date da = new Date();
        try {
            da = callProcedureGetFechaServidor();
        }catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        GregorianCalendar gc = new GregorianCalendar(año, mes-1, dia);
        Date d = gc.getTime();
        if(d.compareTo(da) == 0){
            if(arrayturno[0] != null)
                turnoinicial = Integer.parseInt(arrayturno[0]);
            else{
                try{
                    turnoinicial = callProcedureGetTurnoMaximoFecha() + 1;
                }catch(SQLException e){
                    System.out.println(e.getMessage());
                }

            }
        }else
            turnoinicial = 1;

        for(turno = turnoinicial; turno < 25; turno++){
            noEstaDisponible = 0;
            fila=0;
            while(arrayturno[fila] != null){
                if(Integer.parseInt(arrayturno[fila]) == turno)
                    noEstaDisponible++;
                fila++;
            }
            if(noEstaDisponible == 0){
                turnoHora = turno + " / " + getHoraTurno(turno);
                jComboBox3.addItem(turnoHora);
            }
        }


    }

    public Date callProcedureGetFechaServidor() throws SQLException{
        Connection dbConnection = null;
        CallableStatement callableStatement = null;
        String fechaActual = "{call fechaActual(?)}";
        Date fa = new Date();
        try {
                dbConnection = conexiondb.getDBConnection();
                callableStatement = dbConnection.prepareCall(fechaActual);
                callableStatement.registerOutParameter(1, java.sql.Types.DATE);
                //MariaDB
                callableStatement.executeUpdate();// execute obtenerCitaMaxima store procedure
                //MySQL
                //callableStatement.executeQuery();// execute obtenerCitaMaxima store procedure
                fa = callableStatement.getDate(1);
                //System.out.println("Fecha actual del servidor: " + fa);
        } catch (SQLException e) {
                System.out.println(e.getMessage());
        } finally {
                if (callableStatement != null)
                        callableStatement.close();
                if (dbConnection != null)
                        dbConnection.close();
        }
        return fa;
    }

    private int callProcedureGetTurnoMaximoFecha() throws SQLException {
        Connection dbConnection = null;
        CallableStatement callableStatement = null;
        String turnoMaximoFechaActual = "{call turnoMaximoFechaActual(?)}";
        int maxturno = 1;
        try {
                dbConnection = conexiondb.getDBConnection();
                callableStatement = dbConnection.prepareCall(turnoMaximoFechaActual);
                callableStatement.registerOutParameter(1, java.sql.Types.INTEGER);
                //MariaDB
                callableStatement.executeUpdate();// execute turnoMaximoFechaActual store procedure
                //MySQL
                //callableStatement.executeQuery();// execute turnoMaximoFechaActual store procedure
                maxturno = callableStatement.getInt(1);
        } catch (SQLException e) {
                System.out.println(e.getMessage());
        } finally {
                if (callableStatement != null)
                        callableStatement.close();
                if (dbConnection != null)
                        dbConnection.close();
        }
        return maxturno;
    }

    private String getHoraTurno(int turno){
        String horat = "08:00:00 AM";
        switch(turno){
            case 1:
                horat = "08:00:00 AM";
                break;
            case 2:
                horat = "08:15:00 AM";
                break;
            case 3:
                horat = "08:30:00 AM";
                break;
            case 4:
                horat = "08:45:00 AM";
                break;
            case 5:
                horat = "09:00:00 AM";
                break;
            case 6:
                horat = "09:15:00 AM";
                break;
            case 7:
                horat = "09:30:00 AM";
                break;
            case 8:
                horat = "09:45:00 AM";
                break;
            case 9:
                horat = "10:00:00 AM";
                break;
            case 10:
                horat = "10:15:00 AM";
                break;
            case 11:
                horat = "10:30:00 AM";
                break;
            case 12:
                horat = "10:45:00 AM";
                break;
            case 13:
                horat = "11:00:00 AM";
                break;
            case 14:
                horat = "11:15:00 AM";
                break;
            case 15:
                horat = "11:30:00 AM";
                break;
            case 16:
                horat = "11:45:00 AM";
                break;
            case 17:
                horat = "12:00:00 PM";
                break;
            case 18:
                horat = "12:15:00 PM";
                break;
            case 19:
                horat = "12:30:00 PM";
                break;
            case 20:
                horat = "12:45:00 PM";
                break;
            case 21:
                horat = "02:00:00 PM";
                break;
            case 22:
                horat = "02:15:00 PM";
                break;
            case 23:
                horat = "02:30:00 PM";
                break;
            case 24:
                horat = "02:45:00 PM";
                break;
        }
        return horat;
    }

    private void callProcedureInsertarNuevaCita() throws SQLException{
        Connection dbConnection = null;
        CallableStatement callableStatement = null;
        String insertarNuevaCita = "{call insertarNuevaCita(?,?,?,?,?)}";
        int turno = getTurnoCombo(jComboBox3.getSelectedItem().toString());
        String strHora = getHoraTurno(turno);
        SimpleDateFormat sdf = new SimpleDateFormat("hh:mm:ss a");
        Date dt;
        long ms = Integer.toUnsignedLong(0);
        try{
            ms = sdf.parse(strHora).getTime();
        } catch(Exception e){
            System.out.println(e.getMessage());
        }
        Calendar c = Calendar.getInstance();
        c.set(Integer.parseInt(txtAño.getText()), Integer.parseInt(txtMes.getText())-1, Integer.parseInt(txtDia.getText()));
        java.sql.Date sqlDate = new java.sql.Date(c.getTimeInMillis());
        sqlDate.toLocalDate();
        java.sql.Time sqlTime = new java.sql.Time(ms);

        //System.out.println("utilDate:" + c);
        //System.out.println("sqlDate:" + sqlDate);
        //System.out.println("Date:" + sqlDate.toLocalDate());
        //System.out.println("Hora: " + sqlTime);


        try{
            dbConnection = conexiondb.getDBConnection();
            callableStatement = dbConnection.prepareCall(insertarNuevaCita);
            callableStatement.setDate(1, sqlDate);
            callableStatement.setInt(3, turno);
            callableStatement.setInt(4, Integer.parseInt(lblCodigoPaciente.getText()));
            callableStatement.setInt(5, 0);
            callableStatement.setTime(2, sqlTime);
            callableStatement.executeUpdate();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
                if (callableStatement != null)
                        callableStatement.close();
                if (dbConnection != null)
                        dbConnection.close();
        }
    }

    private int getTurnoCombo(String str){
        int indexend=0;
        for(int i=0; i<str.length(); i++){
            if(str.charAt(i) == '/')
                i=str.length();
            else
                indexend++;
        }
        return Integer.parseInt(str.substring(0, indexend-1));
    }

    private void callProcedureCambiarIdEstadoCita(int estado) throws SQLException{
        Connection dbConnection = null;
        CallableStatement callableStatement = null;
        String cambiarIdEstadoCita = "{call cambiarIdEstadoCita(?,?,?,?)}";
        int turno = getTurnoCombo1(jComboBox1.getSelectedItem().toString());
        int datos[] = getAñoMesDia(jComboBox1.getSelectedItem().toString());
        Calendar c = Calendar.getInstance();
        c.set(datos[0], datos[1]-1, datos[2]);
        java.sql.Date sqlDate = new java.sql.Date(c.getTimeInMillis());
        sqlDate.toLocalDate();

        //System.out.println("utilDate:" + c);
        //System.out.println("sqlDate:" + sqlDate);
        //System.out.println("Date:" + sqlDate.toLocalDate());
        //System.out.println("Hora: " + sqlTime);


        try{
            dbConnection = conexiondb.getDBConnection();
            callableStatement = dbConnection.prepareCall(cambiarIdEstadoCita);
            callableStatement.setDate(1, sqlDate);
            callableStatement.setInt(2, turno);
            callableStatement.setInt(3, Integer.parseInt(lblCodigoPaciente.getText()));
            callableStatement.setInt(4, estado);
            callableStatement.executeUpdate();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
                if (callableStatement != null)
                        callableStatement.close();
                if (dbConnection != null)
                        dbConnection.close();
        }
    }

    private int getTurnoCombo1(String str){
        return Integer.parseInt(Character.toString(str.charAt(str.length()-1)));
    }

    private int[] getAñoMesDia(String str){
        int año=0, mes=0, dia=0;
        año = Integer.parseInt(str.substring(0, 4));
        mes = Integer.parseInt(str.substring(5, 7));
        dia = Integer.parseInt(str.substring(8, 10));
        int[] datos = new int[3];
        datos[0] = año;
        datos[1] = mes;
        datos[2] = dia;
        return datos;
    }
}
